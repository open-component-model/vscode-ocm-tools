/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ComponentName = string;
export type RelaxedSemver = string;
export type Labels = Label[];
export type OciRepositoryContext = RepositoryContext & {
  baseUrl: string;
  componentNameMapping?: "urlPath" | "sha256-digest";
  type?: "ociRegistry" | "OCIRegistry";
  [k: string]: unknown;
};

/**
 * OCM Component Descriptor v3 schema
 */
export interface HttpsGardenerCloudSchemasComponentDescriptorOcmV3Alpha1 {
  apiVersion: "ocm.gardener.cloud/v3alpha1" | "ocm.software/v3alpha1";
  kind: "ComponentVersion";
  metadata: Meta;
  repositoryContexts?: OciRepositoryContext[];
  spec: Spec;
  signatures?: Signature[];
  [k: string]: unknown;
}
/**
 * component version metadata
 */
export interface Meta {
  name: ComponentName;
  version: RelaxedSemver;
  labels?: Labels;
  provider?: Provider;
  creationTime?: string;
}
export interface Label {
  name: string;
  value: unknown;
  version?: {
    [k: string]: unknown;
  };
  signing?: boolean;
}
export interface Provider {
  name: string;
  labels?: Labels;
}
export interface RepositoryContext {
  type: string;
  [k: string]: unknown;
}
/**
 * specification of the content of a component versiont
 */
export interface Spec {
  sources?: SourceDefinition[];
  references?: Reference[];
  resources?: (ResourceType | OciImageResource | GenericResource)[];
}
export interface SourceDefinition {
  name: string;
  extraIdentity?: IdentityAttribute;
  version: RelaxedSemver;
  type: string;
  labels?: Labels;
  access: Access | GithubAccess | HttpAccess;
  [k: string]: unknown;
}
export interface IdentityAttribute {
  [k: string]: unknown;
}
/**
 * base type for accesses (for extensions)
 */
export interface Access {
  [k: string]: unknown;
}
export interface GithubAccess {
  type: "github";
  repoUrl: string;
  ref: string;
  commit?: string;
  [k: string]: unknown;
}
export interface HttpAccess {
  type: "http";
  url: string;
  [k: string]: unknown;
}
/**
 * a reference to a component
 */
export interface Reference {
  componentName: ComponentName;
  name: string;
  extraIdentity?: IdentityAttribute;
  version: RelaxedSemver;
  labels?: Labels;
  digest?: null | DigestSpec;
}
export interface DigestSpec {
  hashAlgorithm: string;
  normalisationAlgorithm: string;
  value: string;
}
/**
 * base type for resources
 */
export interface ResourceType {
  name: string;
  extraIdentity?: IdentityAttribute;
  version: RelaxedSemver;
  type: string;
  srcRefs?: SrcRef[];
  relation: "local" | "external";
  labels?: Labels;
  access: Access | OciBlobAccess | LocalFilesystemBlobAccess | LocalOciBlobAccess;
  digest?: null | DigestSpec;
  [k: string]: unknown;
}
/**
 * a reference to a (component-local) source
 */
export interface SrcRef {
  identitySelector?: IdentityAttribute;
  labels?: Labels;
  [k: string]: unknown;
}
export interface OciBlobAccess {
  type: "ociBlob";
  /**
   * A oci reference to the manifest
   */
  ref?: string;
  /**
   * The media type of the object this access refers to
   */
  mediaType?: string;
  /**
   * The digest of the targeted content
   */
  digest?: string;
  /**
   * The size in bytes of the blob
   */
  size?: number;
  [k: string]: unknown;
}
export interface LocalFilesystemBlobAccess {
  type: "localFilesystemBlob";
  /**
   * filename of the blob that is located in the "blobs" directory
   */
  filename: string;
  [k: string]: unknown;
}
export interface LocalOciBlobAccess {
  type: "localOciBlob";
  /**
   * digest of the layer within the current component descriptor
   */
  digest?: string;
  [k: string]: unknown;
}
export interface OciImageResource {
  name: string;
  extraIdentity?: IdentityAttribute;
  version: RelaxedSemver;
  type: "ociImage";
  labels?: Labels;
  access: OciImageAccess;
  digest?: null | DigestSpec;
  [k: string]: unknown;
}
export interface OciImageAccess {
  type: "ociRegistry";
  imageReference: string;
  [k: string]: unknown;
}
export interface GenericResource {
  name: string;
  extraIdentity?: IdentityAttribute;
  version: RelaxedSemver;
  type: "generic";
  labels?: Labels;
  access: GenericAccess;
  digest?: null | DigestSpec;
}
export interface GenericAccess {
  type: "generic";
  [k: string]: unknown;
}
export interface Signature {
  name: string;
  digest: DigestSpec;
  signature: SignatureSpec;
}
export interface SignatureSpec {
  algorithm: string;
  value: string;
  /**
   * The media type of the signature value
   */
  mediaType: string;
}
